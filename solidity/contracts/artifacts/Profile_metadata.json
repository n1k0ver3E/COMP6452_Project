{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_regulatorAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_regulatorName",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "accountAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accountStatus",
						"type": "uint256"
					}
				],
				"name": "ApproveAccount",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "accountAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "accountName",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "accountId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accountType",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accountStatus",
						"type": "uint256"
					}
				],
				"name": "RegisterAccount",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accountInfoByAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "accountAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "accountName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "accountId",
						"type": "uint256"
					},
					{
						"internalType": "enum Profile.AccountType",
						"name": "accountType",
						"type": "uint8"
					},
					{
						"internalType": "enum Profile.AccountStatus",
						"name": "accountStatus",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "isValue",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_accountAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_accountStatus",
						"type": "uint256"
					}
				],
				"name": "approveAccount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastAccountId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_accountAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_accountName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_accountTypeValue",
						"type": "uint256"
					}
				],
				"name": "registerAccount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "regulatorAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implements profile mMnagement.  Constraints:  1. Each participant per 1 account address 2. only one regulator address per 1 profile contract Program flow 1. create \"Profile contract\" by adding regulator's address in its constructor. 2. The participants(1=Farmer,2=Manufacturer,3=Reatiler,4=Logistic) use the backend(off-chain) to call function registerAccount(on-chain) 3. Event RegisterAccount is raised and the backend (off-chain) can get error and result from function registerAccount(on-chain). The backend can store the data in database off-chain. 4. The initial of account status is  0=Pending. 5. The regulator uses the off-chain app to pass the parameter of each participant account address and account status to function approveAccount(on-chain). 6. To get accountInfo (struct Account), can directly call mapping accountInfoByAddress[accountAddress]",
			"kind": "dev",
			"methods": {
				"approveAccount(address,uint256)": {
					"params": {
						"_accountAddress": "Each participant can have only one accountAddress for this phase. ",
						"_accountStatus": "0=Pending, 1=Approved, 2=Rejected"
					}
				},
				"registerAccount(address,string,uint256)": {
					"params": {
						"_accountAddress": "Each participant can have only one accountAddress for this phase.",
						"_accountName": "The account name for account address.",
						"_accountTypeValue": "Specific the interger as following  0=Regulator,1=Farmer,2=Manufacturer,3=Reatiler,4=Logistic"
					}
				}
			},
			"title": "Profile Management",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approveAccount(address,uint256)": {
					"notice": "Function 2: approveAccount. Only regulator account can use this function."
				},
				"registerAccount(address,string,uint256)": {
					"notice": "Function 1: createProfile for Regulator,Farmer,Manufacturer,Reatiler,Logistic"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Profile.sol": "Profile"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Profile.sol": {
			"keccak256": "0x1a513259811784bd5193b495f024354948fed1892ecdacce888d55560419b08f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://1c0e84b5c05bce05493e71554c3f82c344b11fd6b2b1e3d90e0b19fe52815741",
				"dweb:/ipfs/QmdJaV1JGoaR28KpmLdZvH6CVmpW6V2FyyTNhnFL3E9fha"
			]
		}
	},
	"version": 1
}